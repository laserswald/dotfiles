## Main
# main
snippet main
int main(int argc, const char *argv[])
{
	${0}
	return 0;
}
endsnippet
# main(void)
snippet mainn
int main(void)
{
	${0}
	return 0;
}
endsnippet
##

## Preprocessor
# #include <...>
snippet inc
#include <${1:stdio}.h>
endsnippet
# #include "..."
snippet Inc
#include "${1:`vim_snippets#Filename("$1.h")`}"
endsnippet
# ifndef...define...endif
snippet ndef
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet
# define
snippet def
#define
# ifdef...endif
endsnippet
snippet ifdef
#ifdef ${1:FOO}
${2:#define }
#endif
endsnippet
# if
snippet #if
#if ${1:FOO}
${0}
#endif
endsnippet
# header include guard
snippet once
#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

#define $1

${0:${VISUAL}}

#endif /* end of include guard: $1 */
endsnippet
##

## Control Statements
# if
snippet if
if (${1:true}) {
	${0:${VISUAL:then...}}
}
endsnippet
snippet ife
if (${1:true}) {
	${2}
} else {
	${0}
}
endsnippet
# else
snippet el
else {
	${0:${VISUAL:...}}
}
endsnippet
# else if
snippet elif
else if (${1:true}) {
	${0:${VISUAL:...}}
}
endsnippet
# ifi
snippet ifi
if (${1:true}) ${0};
endsnippet
# ternary
snippet t
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet
# switch
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
								${3}
								${4:break;}${5}
	default:
								${6}
}
endsnippet
# switch without default
snippet switchndef
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
								${3}
								${4:break;}${5}
}
endsnippet
# case
snippet case
case ${1:/* variable case */}:
${2}
${3:break;}
endsnippet
snippet ret
return ${0};
endsnippet
##
## Loops
# for
snippet for
for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${0:${VISUAL:...}}
}
endsnippet
# for (custom)
snippet forr
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
	${0:${VISUAL:...}}
}
endsnippet
# while
snippet wh
while (${1:/* condition */}) {
	${0:${VISUAL:...}}
}
endsnippet
# do... while
snippet do
do {
	${0:${VISUAL:...}}
} while (${1:/* condition */});
endsnippet
##
## Functions
# function definition
snippet fun
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet
# function declaration
snippet fund
${1:void} ${2:function_name}(${3});
endsnippet
##

## Types
# typedef
snippet td
typedef ${1:int} ${2:MyCustomType};
endsnippet
# struct
snippet st
struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
	${2:/* data */}
}${3: /* optional variable list */};
endsnippet
# typedef struct
snippet tds
typedef struct ${2:_$1 }{
	${3:/* data */}
} ${1:`vim_snippets#Filename('$1_t', 'name')`};
endsnippet
snippet enum
enum ${1:name} { ${0} };
endsnippet
# typedef enum
snippet tde
typedef enum {
	${1:/* data */}
} ${2:foo};
endsnippet
##

## Input/Output
# printf
snippet pr
printf("${1:%s}\n"${2});
endsnippet
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet
# getopt
snippet getopt
int choice;
while (1)
{
	static struct option long_options[] =
	{
		/* Use flags like so:
		   {"verbose",	no_argument,	&verbose_flag, 'V'}*/
		/* Argument styles: no_argument, required_argument, optional_argument */
		{"version", no_argument,	0,	'v'},
		{"help",	no_argument,	0,	'h'},
		${1}
		{0,0,0,0}
	};

	int option_index = 0;

	/* Argument parameters:
no_argument: " "
required_argument: ":"
optional_argument: "::" */

	choice = getopt_long( argc, argv, "vh",
			long_options, &option_index);

	if (choice == -1)
		break;

	switch( choice )
	{
		case 'v':
			${2}
			break;

		case 'h':
			${3}
			break;

		case '?':
			/* getopt_long will have already printed an error */
			break;

		default:
			/* Not sure how to get here... */
			return EXIT_FAILURE;
	}
}

/* Deal with non-option arguments here */
if ( optind < argc )
{
	while ( optind < argc )
	{
		${0}
	}
}
endsnippet
##
## Miscellaneous
# This is kind of convenient
snippet . "Index this item."
[${1}]
endsnippet

# C 'objects'
snippet md "'Method' declaration" b
${2:int} ${1:type}_${2:action}($1* this${0});
endsnippet

snippet mi "'Method' implementation" b
${2:int} ${1:type}_${2:action}($1* this${3}){
	${0:${VISUAL:...}}
}
endsnippet

snippet od "Object basic declaration"

$2* $2_new();
${3:int} $2_init($2* this);
void $2_free($2* this);

endsnippet

snippet oi "Object basic implementation" b
// Allocate a(n) $1 off the heap.
//
// This automatically performs the init function on the new $1, which 
// makes it ready for use.
$1* $1_new(){
	$1* this = calloc(1, sizeof($1));
	if (!this){
		puts("Unable to allocate a $1. Aborting.");
		abort();
	}
	$1_init(this);
	return this;
}

${2:int} $1_init($1* this){
	// Initialize a $1. After this, it's ready to use!
	$0
}

void $1_free($1* this){
	free(this);
	this = NULL; // Make sure we don't accidentally free this again
}
endsnippet

