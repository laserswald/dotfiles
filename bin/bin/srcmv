#!/bin/sh

# rename classes or other constructs 

progname=$(basename "$0")

usage() {
	echo "usage: $progname [-f] NAME NEW_NAME

Interactively rename a named construct (such as a class) in source files.

If the construct is in it's own file (such as 'MyClass.php'), $progname
also tries to rename the file to keep naming consistent.

Options:

\t-f\t Force renaming, don't ask interactively.
"
	exit 0;
}

# Return 0 for yes, 1 for no. 
ask_user() {
	while true; do 
		read -p "$1" yn
		case $yn in
			[Yy]* ) return 0;;
			[Nn]* ) return 1;;
		esac
	done
}

# Global find-replace.
rename_txt() {
	from=$1
	to=$2

	for result in $(ag -wl "$from"); do
		if [ $FORCE_MODE ] || ask_user "$progname: change '$from' to '$to' in file '$result' (y/n)? "; then
			echo "Replacing '$from' with '$to' in '$result'."
    		sed -i "s/\<$from\>/$to/g" "$result"
		fi
	done
}

# Rename the file.
move_file() {
    from=$1
    to=$2

    containing_file=$(find . -iname "${from}.*")

    count=$(echo "$containing_file" | wc -l)

    if [ $count -gt 1 ]; then 
    	echo "$progname: error: found ${count} files for ${from}. Resolve this manually." >&2
    	exit 1
    fi
    if [ $count -eq 0 ]; then 
    	echo "$progname: couldn't find file for construct '${from}'." >&2
    	return 0
    fi

    new_file=$(echo "$containing_file" | sed "s/$from/$to/g")

    if [ $FORCE_MODE ] || ask_user "$progname: rename file '$containing_file' to '$new_file' (y/n)? "; then
        echo "Moving '$containing_file' to '$new_file'."
        mv "$containing_file" "$new_file"
    fi
}

while getopts "f" flag; do
	case $flag in
		f) FORCE_MODE=1;;
		*) usage ;;
	esac
done
shift $((OPTIND-1))

[ $# -ne 2 ] && usage

from="$1"
to="$2"

rename_txt $from $to
move_file $from $to
